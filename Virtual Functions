#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
#include <iostream>
using namespace std;

// solution starts from here

class Person{
    protected:
     string name;
     int age;
     
     public:
        Person(){}
        
        virtual void getdata(){}
        virtual void putdata(){}
};
class Professor: public Person{
    
    int publications;
    int id;
    static int current_id_professor;
    
    public:
        Professor(){}
        
        void getdata(){
            cin >> name >> age >> publications ;
            id = ++current_id_professor;
        }
        
        void putdata(){
            cout << name <<" "<< age <<" "<<publications <<" "<< id << endl;
        }
};
int Professor:: current_id_professor = 0;

class Student: public Person{
   
    int marks[6];
    int id;
    static int current_id_student;
    int sum;
    
    public:
           Student(){}
           
           void getdata(){
               cin >> name >> age ;
               for(int i=0; i < 6; i++){
                   cin >> marks[i];
                   sum +=marks[i]; 
               }
               id = ++current_id_student;
           }
       void putdata(){
            cout << name <<" "<< age <<" "<<sum <<" "<< id << endl;
       }
    
};
int Student ::current_id_student=0;

// solution ends here

int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
