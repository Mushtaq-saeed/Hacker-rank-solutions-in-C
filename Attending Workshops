#include<bits/stdc++.h>

using namespace std;

//Define the structs Workshops and Available_Workshops.
//Implement the functions initialize and CalculateMaxWorkshops

struct Workshop {
    int start_time;
    int duration;
    int end_time;
};


struct Available_Workshops {
    int n;  
    Workshop* workshops;  

   
    Available_Workshops(int num) : n(num) {
        workshops = new Workshop[n];
    }

  
    ~Available_Workshops() {
        delete[] workshops;
    }
};


Available_Workshops* initialize(int start_time[], int duration[], int n) {
    Available_Workshops* aw = new Available_Workshops(n);
    for (int i = 0; i < n; ++i) {
        aw->workshops[i].start_time = start_time[i];
        aw->workshops[i].duration = duration[i];
        aw->workshops[i].end_time = start_time[i] + duration[i];
    }
    return aw;
}

int CalculateMaxWorkshops(Available_Workshops* ptr) {
  
    vector<Workshop> workshops(ptr->workshops, ptr->workshops + ptr->n);

   
    sort(workshops.begin(), workshops.end(), [](const Workshop& a, const Workshop& b) {
        return a.end_time < b.end_time;
    });

    int maxWorkshops = 0;
    int lastEndTime = 0;

    for (const auto& workshop : workshops) {
        if (workshop.start_time >= lastEndTime) {
            ++maxWorkshops;
            lastEndTime = workshop.end_time;
        }
    }

    return maxWorkshops;
}
int main(int argc, char *argv[]) {
    int n; // number of workshops
    cin >> n;
    // create arrays of unknown size n
    int* start_time = new int[n];
    int* duration = new int[n];

    for(int i=0; i < n; i++){
        cin >> start_time[i];
    }
    for(int i = 0; i < n; i++){
        cin >> duration[i];
    }

    Available_Workshops * ptr;
    ptr = initialize(start_time,duration, n);
    cout << CalculateMaxWorkshops(ptr) << endl;
    return 0;
}
